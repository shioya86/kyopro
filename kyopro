#!/usr/bin/env python3
import sys
import platform
import os
import subprocess


def create_files(_ext:str, _order:str, _problem_num:int):
  if _problem_num==0:
    return

  # 問題名をアルファベットにするかどうか
  alph_flag = True if _problem_num<=26 else False

  for i in range( _problem_num ):
    p_filename = chr(ord('a') + i) if alph_flag else "task" + str(i+1).zfill(3)
    new_order = '{}{}.{}'.format(_order, p_filename, _ext)

    subprocess.run(new_order, shell=True, cwd=os.getcwd())


def input_default(default):
  res = input()
  return default if res=='' else res

if __name__ == '__main__':
  args = sys.argv
  if 2 == len(args):
    # コマンドライン引数にファイル名が与えられていた場合、その名前で簡易作成する
    easy_make_path = '{}/{}'.format(os.getcwd(), args[1])
    if os.path.isdir(easy_make_path):
      print( '[error] The specified directory already exists.' )
      exit()
    file_path = os.getcwd()
    file_ext = 'd'
    template_path = '{}/template/main.d'.format(os.path.dirname(__file__))
    outdir = args[1]
    problem_num = 8
  else:
    # コマンドライン引数に何もない場合インタラクティブに生成
    print( 'input your project information.\n')

    print( 'File path? ({})'.format( os.getcwd() ), end=' ')
    file_path = input_default( os.getcwd() )

      
    print( 'Your language extension? (d)', end=' ' )
    file_ext = input_default('d')
    template_path = '{}/template/main.{}'.format( os.path.dirname(__file__), file_ext)
    if not os.path.isfile(template_path):
      print('This template file has your input extension is not found.')
      exit()

    print( 'Contest name? (tasks)', end=' ' )
    outdir = input_default('tasks')

    print( 'Number of problems in the contest? (8)', end=' ')
    problem_num = input_default(8)

    print( 'Making competitive programming project...')

  # 解答テンプレートの挿入
  order = 'mkdir -p {}/{}'.format(os.getcwd(), outdir)
  subprocess.run(order, shell=True)

  order = 'rm -f {}/{}/*'.format(os.getcwd(), outdir)
  subprocess.run(order, shell=True)

  out_path = '{}/{}/'.format(os.getcwd(), outdir)
  order = 'cp {} {}'.format(template_path, out_path)
  create_files(_ext=file_ext, _order=order, _problem_num=int(problem_num))

  order = 'cp -r {}/.vscode {}'.format(os.path.dirname(__file__), out_path)
  subprocess.run(order, shell=True)

  print('Done.')
